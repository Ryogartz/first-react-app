{"version":3,"sources":["components/AddCategory.js","helpers/GetGilf.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","reportWebVitals.js","index.js"],"names":["AddCategory","setCategories","categories","useState","inputvalue","setinputvalue","onSubmit","e","preventDefault","trim","length","type","value","onChange","target","getData","a","URL","encodeURI","fetch","resp","json","data","Gifdata","map","id","title","url","images","downsized_medium","console","log","GifGridItem","className","src","alt","GifGrid","category","loading","state","setstate","useEffect","then","img","useFetchGifs","GifExpertApp","index","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"6KAIMA,EAAc,SAAC,GAAkC,IAAjCC,EAAgC,EAAhCA,cAAgBC,EAAgB,EAAhBA,WAAgB,EAEdC,mBAAS,IAFK,mBAE3CC,EAF2C,KAE/BC,EAF+B,KAoBlD,OACI,uBAAMC,SAbgB,SAACC,GACvBA,EAAEC,iBAECJ,EAAWK,OAAOC,OAAS,IAC1BT,EAAc,CAACG,GAAF,mBAAkBF,KAE/BG,EAAc,MAOlB,UACI,8CACA,uBAAOM,KAAK,OACNC,MAAOR,EACPS,SArBW,SAACN,GACtBF,EAAcE,EAAEO,OAAOF,c,+BCTlBG,EAAO,uCAAG,WAAOb,GAAP,uBAAAc,EAAA,6DACbC,EADa,0FAC4EC,UAAUhB,GADtF,qBAGAiB,MAAMF,GAHN,cAGbG,EAHa,gBAIEA,EAAKC,OAJP,uBAIZC,EAJY,EAIZA,KAEDC,EAAUD,EAAKE,KAAI,SAACZ,GACtB,MAAM,CACFa,GAAGb,EAAMa,GACTC,MAAMd,EAAMc,MACZC,IAAIf,EAAMgB,OAAOC,iBAAiBF,QAG1CG,QAAQC,IAAI,uBAAwBR,GAbjB,kBAcZA,GAdY,4CAAH,sDCEdS,EAAc,SAAC,GAAoB,IAAnBL,EAAkB,EAAlBA,IAAID,EAAc,EAAdA,MAAc,EAARD,GAE5B,OADAK,QAAQC,IAAIJ,EAAMD,GAEd,sBAAKO,UAAU,yCAAf,UACG,qBAAMC,IAAKP,EAAKQ,IAAKT,IACrB,4BAAIA,QCFTU,EAAU,SAAC,GAAkB,IAAjBlC,EAAgB,EAAhBA,WAAgB,ECFN,SAACmC,GAAc,IAAD,EACZlC,mBAAS,CAC/BmB,KAAK,GACLgB,SAAQ,IAH0B,mBAC/BC,EAD+B,KACxBC,EADwB,KAsBtC,OAhBAC,qBAAU,WACN1B,EAAQsB,GAAUK,MAAK,SAAAC,GACnBH,EAAS,CACTlB,KAAKqB,EACLL,SAAQ,SAGb,CAACD,IASGE,EDlBkBK,CAAa1C,GAA/BoB,EAFuB,EAEvBA,KAAOgB,EAFgB,EAEhBA,QAWd,OACI,qCACA,6BAAKpC,IACHoC,EAAU,mBAAGL,UAAU,mCAAb,2BAAoE,KAChF,qBAAKA,UAAU,YAAf,SAEIX,EAAKE,KAAI,SAAAmB,GAAG,OAET,aADC,CACA,EAAD,eAA+BA,GAAZA,EAAIlB,aEpBhCoB,EAAe,WAAK,IAAD,EAEe1C,mBAAS,CAAC,gBAFzB,mBAEdD,EAFc,KAEFD,EAFE,KAIpB,OACK,gCAEI,8CAEA,cAAC,EAAD,CAAaA,cAAeA,EAAeC,WAAcA,IACzD,uBAEA,6BACOA,EAAWsB,KAAI,SAACZ,EAAMkC,GAAP,OACZ,cAAC,EAAD,CAEA5C,WAAYU,GADPA,YCTdmC,G,MAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBP,MAAK,YAAkD,IAA/CQ,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,QCCdO,IAASC,OACL,cAAC,EAAD,IAEFC,SAASC,eAAe,SAM1BX,M","file":"static/js/main.6333b60c.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\nimport PropTypes  from 'prop-types';\r\n\r\n// Funcion  + props\r\nconst AddCategory = ({setCategories , categories}) => {\r\n\r\n    const [inputvalue, setinputvalue] = useState('')\r\n\r\n    const handleInputValue = (e)=>{\r\n        setinputvalue(e.target.value)\r\n    }\r\n\r\n    const handleInputSubmit = (e)=>{\r\n        e.preventDefault()\r\n\r\n        if(inputvalue.trim().length > 2){\r\n            setCategories([inputvalue , ...categories])\r\n            // limpiar el value\r\n            setinputvalue('')\r\n        }\r\n\r\n\r\n    }\r\n\r\n    return (\r\n        <form onSubmit={handleInputSubmit}>\r\n            <h2>Add Category</h2>\r\n            <input type=\"text\" \r\n                  value={inputvalue}\r\n                  onChange={handleInputValue}>               \r\n            </input>\r\n        </form>\r\n    )\r\n}\r\n\r\n// prototipos\r\n// definir los protetype\r\nAddCategory.propTypes ={\r\n    setCategories:PropTypes.func.isRequired,\r\n    categories:PropTypes.array.isRequired\r\n} \r\n\r\n\r\nexport{\r\n    AddCategory\r\n}\r\n","export const getData = async (categories)=>{\r\n    const URL = `https://api.giphy.com/v1/gifs/search?api_key=0Wluk7aqyXQ7umvO8kTbFqZjKSjxZWY2&q=${encodeURI(categories)}&limit=4`\r\n    \r\n    const resp = await fetch(URL)\r\n    const {data} = await resp.json()\r\n    \r\n    const Gifdata = data.map((value)=>{\r\n        return{\r\n            id:value.id,\r\n            title:value.title,\r\n            url:value.images.downsized_medium.url\r\n        }\r\n    })\r\n    console.log(\"data traida de fetch\", Gifdata)\r\n    return Gifdata\r\n}","import React from 'react'\r\n\r\nconst GifGridItem = ({url,title,id}) => {\r\n    console.log(url , title)\r\n    return (\r\n        <div className=\"card animate__animated animate__fadeIn\">\r\n           <img  src={url} alt={title} />\r\n           <p>{title}</p> \r\n        </div>\r\n    )\r\n}\r\n\r\nexport{\r\n    GifGridItem\r\n}","import React, {useEffect, useState} from 'react'\r\nimport { getData } from '../helpers/GetGilf'\r\nimport { useFetchGifs } from '../hooks/useFetchGifs'\r\nimport { GifGridItem } from './GifGridItem'\r\n\r\nconst GifGrid = ({categories}) => {\r\n    // const [images, setimages] = useState([])\r\n    const {data , loading} = useFetchGifs(categories)\r\n    // ejecutar codigo Una vez misma funcion que el cliclo de vida viewMount\r\n    // podemos dejar un arreglo vacio para que se ejecuta una vez O podemos decirlo que se ejecuta\r\n    // cada vez que hay un cambios en 'categories'\r\n    // useEffect(() => {\r\n    //     getData(categories).then(img=>setimages(img))\r\n    // },[categories])\r\n\r\n    \r\n\r\n\r\n    return (\r\n        <>\r\n        <h3>{categories}</h3>\r\n        { loading ? <p className=\"animate__animated animate__flash\"> Cargando... </p> : null}\r\n        <div className=\"card-grid\">           \r\n          {\r\n            data.map(img=>(\r\n                // enviar las props deforma ya independiente sin necesidad de map\r\n               <GifGridItem  key={img.id} {...img}></GifGridItem>\r\n            ))\r\n\r\n          }\r\n        </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport{\r\n    GifGrid\r\n}\r\n","import { useEffect, useState } from \"react\"\r\nimport { getData } from \"../helpers/GetGilf\";\r\n\r\nexport const useFetchGifs = (category) => {\r\n    const [state, setstate] = useState({\r\n        data:[],\r\n        loading:true\r\n    });\r\n\r\n    useEffect(() => {\r\n        getData(category).then(img=>{\r\n            setstate({\r\n            data:img,\r\n            loading:false\r\n        })\r\n    })\r\n    }, [category])\r\n\r\n    // setTimeout(()=>{\r\n    //     setstate({\r\n    //         data:[1,2,3,4,5,6],\r\n    //         loading:false\r\n    //     })\r\n    // },3000)\r\n\r\n    return state; //{data[] , loading:true}\r\n\r\n}\r\n","import  React,{useState} from 'react';\r\nimport { AddCategory } from './components/AddCategory';\r\nimport { GifGrid } from './components/GifGrid';\r\n\r\n\r\n\r\nconst GifExpertApp = ()=>{\r\n\r\n    const [categories, setCategories] = useState(['Dragon ball'])\r\n\r\n     return(\r\n          <div>\r\n\r\n              <h2>GifExpertApp</h2>\r\n              {/* componente */}\r\n              <AddCategory setCategories={setCategories} categories = {categories} />\r\n              <hr />\r\n\r\n              <ol>\r\n                    {categories.map((value,index)=>(\r\n                        <GifGrid \r\n                        key={value}\r\n                        categories={value}  />\r\n                    ))\r\n                    }\r\n              </ol>\r\n\r\n          </div>\r\n        );\r\n}\r\n\r\nexport{\r\n    GifExpertApp\r\n}\r\n\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { GifExpertApp } from './GifExpertApp';\nimport './index.css';\nimport { PracticaComponente } from './practicaComponente';\nimport reportWebVitals from './reportWebVitals';\n\n\nReactDOM.render(\n    <GifExpertApp />,\n    // <PracticaComponente />,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}